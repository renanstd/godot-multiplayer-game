[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node

export var websocket_url = \"ws://localhost:5000/\"
var position = 10

var _client = WebSocketClient.new()

func _ready():
	# Conectar os signals básicos
	_client.connect(\"connection_closed\", self, \"_closed\")
	_client.connect(\"connection_error\", self, \"_closed\")
	_client.connect(\"connection_established\", self, \"_connected\")
	# Signal de entrada ao receber qualquer dado do server
	_client.connect(\"data_received\", self, \"_on_data\")
	# Inicia a conexão com a url
	var err = _client.connect_to_url(websocket_url)
	if err != OK:
		print(\"Unable to connect\")
		set_process(false)

func _closed(was_clean = false):
	# was_clean will tell you if the disconnection was correctly notified
	# by the remote peer before closing the socket.
	print(\"Closed, clean: \", was_clean)
	set_process(false)

func _connected(protocol):
	print(\"Connected with protocol: \", protocol)

func _on_data():
	print(
		\"Got data from server: \",
		_client.get_peer(1).get_packet().get_string_from_utf8()
	)

func _process(delta):
	if _client.get_connection_status() == _client.CONNECTION_CONNECTED:
		_client.poll()

func _on_Button_button_down():
	var data = {
		\"action\": \"login\",
		\"name\": $TextEdit.text
	}
	data = JSON.print(data)
	_client.get_peer(1).put_packet(data.to_utf8())
	$Button2.disabled = false

func _on_Button2_button_down():
	position += 10
	var data = {
		\"action\": \"move\",
		\"name\": $TextEdit.text,
		\"position\": position
	}
	data = JSON.print(data)
	_client.get_peer(1).put_packet(data.to_utf8())
"

[node name="WebSocketTest" type="Node"]
script = SubResource( 1 )
